//CS F363 : Compiler Construction
//Group No. 24
//1. Nachiket Kotalwar               (2020A7PS0024P)
//2.Parth Patel                      (2020A7PS0026P)
//3.Partha Sarathi Purkayastha       (2020A7PS0043P)
//4.Labeeb Ahsan                     (2020A7PS0045P)
//5.Anish Atul Kulkarni              (2020A7PS0975P)

#ifndef ENUM_H
#define ENUM_H

enum TOKEN_ENUM {
    ID,
	PLUS,
	MINUS,
	DIV,
    EQ,
    COLON,
    ASSIGNOP,
    SEMICOL,
    RANGEOP,
    COMMA,
    NE,
    SQBO,
    SQBC,
    BO,
    BC,
    NUM,
    RNUM,
    MUL,
    COMMENTMARK,
    LT,
    GT,
    LE,
    GE,
    DEF,
    ENDDEF,
    DRIVERDEF,
    DRIVERENDDEF,
    NEWLINE,
    TAB,
    BLANK,
    ERROR,
    ID_LENGTH_ERROR,
    END_OF_FILE
};

static const char *token_list[] = {
	"id",
	"plus",
	"minus",
	"div",
    "eq",
    "colon",
    "assignop",
    "semicol",
    "rangeop",
    "comma",
    "ne",
    "sqbo",
    "sqbc",
    "bo",
    "bc",
    "num",
    "rnum",
    "mul",
    "commentmark",
    "lt",
    "gt",
    "le",
    "ge",
    "def",
    "enddef",
    "driverdef",
    "driverenddef",
    "newline",
    "tab",
    "blank",
    "error",
    "id length error",
    "end of file"
};


enum KEYWORD_ENUM {
	INTEGER,
	REAL,
	BOOLEAN,
	OF,
    ARRAY,
    START,
    END,
    DECLARE,
    MODULE,
    DRIVER,
    PROGRAM,
    GET_VALUE,
    PRINT,
    USE,
    WITH,
    PARAMETERS,
    TAKES,
    INPUT,
    RETURNS,
    FOR,
    IN,
    SWITCH,
    CASE,
    BREAK,
    DEFAULT,
    WHILE,
    TRUE,
    FALSE,
    AND,
    OR
};

static const char *keyword_list[] = {
	"integer",
	"real",
	"boolean",
	"of",
    "array",
    "start",
    "end",
    "declare",
    "module",
    "driver",
    "program",
    "get_value",
    "print",
    "use",
    "with",
    "parameters",
    "takes",
    "input",
    "returns",
    "for",
    "in",
    "switch",
    "case",
    "break",
    "default",
    "while",
    "true",
    "false",
    "AND",
    "OR"
};

enum AST_ENUM {
    BOUND_AST,
    ARRAY_ELEM_OR_ID_AST,
    NUM_AST,
    RNUM_AST,
    PLUS_AST,
    MINUS_AST,
    TRUE_AST,
    FALSE_AST,
    CASE_AST,
    CASE_LIST_AST,
    DEFAULT_AST,
    LOGICAL_OP_AST,
    RELATIONAL_OP_AST,
    ARRAY_ELEM_AST,
    ARRAY_INDEX_AST,
    OPERATION_1_AST,
    OPERATION_2_AST,
    UNARY_OP_AST,
    DECLARE_STMT_AST,
    FOR_LOOP_STMT_AST,
    WHILE_LOOP_STMT_AST,
    SWITCH_STMT_AST,
    PRINT_STMT_AST,
    GET_VALUE_STMT_AST,
    ASSIGN_STMT_AST,
    MODULE_REUSE_STMT_AST,
    ARRAY_AST,
    RANGE_DATATYPE_AST,
    DRIVER_AST,
    MODULE_AST,
    STATEMENT_LIST_AST
};

static const char* ast_list[] = {
    "BOUND",
    "ARRAY_ELEM_OR_ID",
    "NUM",
    "RNUM",
    "+",
    "-",
    "true",
    "false",
    "CASE",
    "CASE_LIST",
    "DEFAULT",
    "LOGICAL_OP",
    "RELATIONAL_OP",
    "ARRAY_ELEM",
    "ARRAY_INDEX",
    "OPERATION_1",
    "OPERATION_2",
    "UNARY_OP",
    "DECLARE",
    "FOR_LOOP",
    "WHILE_LOOP",
    "SWITCH",
    "PRINT",
    "GET_VALUE",
    "ASSIGN",
    "REUSE_STMT",
    "ARRAY",
    "RANGE_DATATYPE",
    "DRIVER",
    "MODULE",
    "STATEMENT_LIST"
};

enum THREE_CODE_ENUM {
    ADD_3CODE,
    SUB_3CODE,
    MUL_3CODE,
    ARRAY_ACCESS_3CODE,
    PRINT_3CODE,
    GET_VALUE_3CODE,
    MODULE_3CODE,
    DRIVER_3CODE,
    GOTO_3CODE,
    LABEL_3CODE,
    EQUAL_3CODE,
    LESS_THAN_3CODE,
    GREATER_THAN_3CODE,
    LESS_THAN_EQUAL_3CODE,
    GREATER_THAN_EQUAL_3CODE,
    NOT_EQUAL_3CODE,
    JUMP_3CODE,
    JUMP_IF_TRUE_3CODE,
    JUMP_IF_NOT_TRUE_3CODE,
    ASSIGN_3CODE,
    INPUT_PARAM_3CODE,
    OUTPUT_PARAM_3CODE,
    MODULE_CALL_3CODE,
    STATIC_ARRAY_DECLARATION_3CODE,
    DYNAMIC_ARRAY_DECLARATION_3CODE
};

static const char* three_code_list[] = {
    "ADD",
    "SUB",
    "MUL",
    "ARRAY_ACCESS",
    "PRINT",
    "GET_VALUE",
    "MODULE",
    "driver",
    "GOTO",
    "LABEL",
    "EQUAL",
    "LESS_THAN",
    "GREATER_THAN",
    "LESS_THAN_EQUAL",
    "GREATER_THAN_EQUAL",
    "NOT_EQUAL",
    "JUMP",
    "JUMP_IF_TRUE",
    "JUMP_IF_NOT_TRUE",
    "ASSIGN",
    "INPUT_PARAM",
    "OUTPUT_PARAM",
    "MODULE_CALL",
    "STAT_ARRAY_DEC",
    "DYN_ARRAY_DEC"
};

enum QUAD_ARG_TYPE {
    ST_ENTRY_QUAD,
    NUM_QUAD,
    RNUM_QUAD,
    BOOL_QUAD,
    LABEL_QUAD,
    NULL_QUAD,
};

#endif